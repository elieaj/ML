import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression


# clone git repo
!git clone https://github.com/zaka-ai/medical-cost-prediction

# change working directory
%cd medical-cost-prediction/data/

# read CSV file in Pandas
data = pd.read_csv("/content/medical-cost-prediction/data/insurance.csv")

# display first 10 rows
data.head(10)

# get the number of rows and columns
rows = data.shape[0]
columns = data.shape[1]

print('There are {} rows and {} columns.'.format(rows,columns))

data.info()

data.describe()

# plot the histogram of the charges
data["charges"].plot(kind ='hist', color = 'b', bins = 20)
plt.title("Distribution of charges")
plt.xlabel("Charges")
plt.ylabel("Frequency")
plt.show()

# select smokers 
smokers = data[data.smoker == 'yes']

# select non smokers
non_smokers = data[data.smoker == 'no']

# print the number of smokers and non-smokers
print ("The number of %d smokers And %d non Smokers" %(smokers.shape[0], non_smokers.shape[0]))

# create the figure
fig = plt.figure(figsize=(12,5))

# add first sub plot for smokers
ax = fig.add_subplot(121)
# draw distribution of charges for smokers
ax.hist(smokers.charges)
# set sub plot title
ax.set_title('Distribution of charges for smokers')

# add second sub plot for non smokers
ax = fig.add_subplot(122)
# draw distribution of charges for non-smokers
ax.hist(non_smokers.charges)
# set sub plot title
ax.set_title('Distribution of charges for non-smokers')

# plot histogram for age distribution
plt.hist(data.age)
plt.title("Age distribution")
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.show()

# draw a scatter plot to show correlation between age and charges, color = 'b'
plt.scatter(data.age, data.charges, color = 'y')
plt.title("Cost of treatment for different ages")
plt.xlabel("Age")
plt.ylabel("Charges")
plt.show()

plt.scatter(smokers.age, smokers.charges, color = 'r')
plt.scatter(non_smokers.age, non_smokers.charges, color = 'b')
plt.title("Scatter Plot for cost with age for smokers and non smokers")
plt.xlabel("Age")
plt.ylabel("Charges")
plt.show()

# draw a histogram to show the distribution of BMI
data["bmi"]
plt.title("BMI distribution")
plt.xlabel("BMI")
plt.ylabel("Frequency")
plt.show()

# select obese people
obese = data[data.bmi > 29]
# select overweight people
overweight = data[(data.bmi > 24) &(data.bmi < 30) ]
# select healthy people 
healthy = data[(data.bmi > 18) & (data.bmi < 25)]

print('There are {} obese, {} overweight and {} healthy individuals.'.format(obese.shape[0], overweight.shape[0], healthy.shape[0]))

plt.hist(obese.charges, color = 'r')
plt.hist(overweight.charges, color = 'y')
plt.hist(healthy.charges , color ='g')
plt.title("Charges distribution")
plt.xlabel("Charges")
plt.ylabel("Frequency")
plt.show()

# print how many missing value in each column
data.isnull().sum()

# drop rows with missing values
data = data.dropna()
data.isnull().sum()

data.info()

# dropping the region feature
data.drop("region",axis = 1, inplace = True)
data.head()

# define dictionary 
gender = {'male':0, 'female':1}
# replace sex column with 0/1
data['sex'] = data.sex.apply(lambda x: gender[x])
# print head to verify
data.head()

# define dictionary 
smokers = {'no':0, 'yes':1}
# replace smokers column with 0/1
data['smoker'] = data.smoker.apply(lambda x: smokers [x] )
# print head to verify
data.head()

# get the max of each column
data_max = data.max()
data_max

# divide each column by its maximum value
data = data.divide(data_max)
data.describe()

# store all columns excpet last one as inputs in X
X = data.iloc[:,0:-1].values
# store the last column as the output (label) in y  
y = data.iloc[:,-1].values  

# split dataset in a 80/20 split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

print(x_train.shape, y_train.shape)
print(x_test.shape, y_test.shape)

# define our regression model
model = LinearRegression()

# train our model
model.fit(x_train, y_train)
print('Model trained!')

print('Model score {}'.format(model.score(x_test, y_test)))

columns_names = data.columns[0:-1].values
features_importance = model.coef_
plt.barh(columns_names, features_importance)
plt.title('Features Importance')
plt.xlabel('importance')
plt.ylabel('feature')
plt.show()
